# Accident-detection-system
Real time accident detection and classification 
from google.colab import drive
drive.mount('/content/gdrive')
!unzip -qq '/content/gdrive/MyDrive/accidents @dl.zip' -d /content/mani
!pip -qq install transformers

from transformers import pipeline
pip -qq install transformers huggingface_hub pillow
import os
entries=os.listdir("/content/mani")
import os

# Path to the dataset directory
dataset_path = "/content/mani/accidents @dl"

# List all entries in the directory
entries = os.listdir(dataset_path)

# Filter out only the directories (classes)
classes = [entry for entry in entries if os.path.isdir(os.path.join(dataset_path, entry))]

# Print the classes
print("Classes in the dataset:", classes)
import os
import torch
import numpy as np
from PIL import Image
from transformers import CLIPProcessor, CLIPModel
from torch.cuda.amp import autocast
from nltk.translate.bleu_score import sentence_bleu
from nltk.translate.meteor_score import meteor_score

# Configuration
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model_name = "laion/CLIP-ViT-L-14-laion2B-s32B-b82K"
labels = [
    "accident",
    "non accident"
]

class AccidentClassifier:
    def __init__(self):
        self.model = CLIPModel.from_pretrained(model_name).to(device)
        self.processor = CLIPProcessor.from_pretrained(model_name)
        self.stats = {
            'total': 0,
            'correct': 0,
            'accident': {'total': 0, 'correct': 0, 'confidences': []},
            'non_accident': {'total': 0, 'correct': 0, 'confidences': []},
            'confusion_matrix': {'tp': 0, 'fp': 0, 'tn': 0, 'fn': 0}
        }

    def analyze_image(self, image_path, true_label):
        try:
            image = Image.open(image_path).convert("RGB")
            inputs = self.processor(
                text=labels,
                images=image,
                return_tensors="pt",
                padding=True
            ).to(device)

            with torch.no_grad(), autocast(enabled=device.type == 'cuda'):
                outputs = self.model(**inputs)
                probs = outputs.logits_per_image.softmax(dim=1).cpu().numpy()

            pred_idx = np.argmax(probs)
            predicted_label = "accident" if pred_idx == 0 else "non_accident"
            confidence = probs[0][pred_idx]

            # Update statistics
            self.stats['total'] += 1
            class_key = 'accident' if true_label == "accident" else 'non_accident'
            self.stats[class_key]['total'] += 1
            self.stats[class_key]['confidences'].append(confidence)

            if predicted_label == true_label:
                self.stats['correct'] += 1
                self.stats[class_key]['correct'] += 1
                if true_label == "accident":
                    self.stats['confusion_matrix']['tp'] += 1
                else:
                    self.stats['confusion_matrix']['tn'] += 1
            else:
                if true_label == "accident":
                    self.stats['confusion_matrix']['fn'] += 1
                else:
                    self.stats['confusion_matrix']['fp'] += 1

            return predicted_label, confidence, probs
        except Exception as e:
            print(f"Error processing {image_path}: {e}")
            return None, None, None

    def calculate_metrics(self):
        cm = self.stats['confusion_matrix']
        precision = cm['tp'] / (cm['tp'] + cm['fp']) if (cm['tp'] + cm['fp']) > 0 else 0
        recall = cm['tp'] / (cm['tp'] + cm['fn']) if (cm['tp'] + cm['fn']) > 0 else 0
        f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
        accuracy = (cm['tp'] + cm['tn']) / self.stats['total'] if self.stats['total'] > 0 else 0
        return precision, recall, f1_score, accuracy

    def print_metrics(self):
        precision, recall, f1_score, accuracy = self.calculate_metrics()
        print(f"\nPrecision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1_score:.2f}, Accuracy: {accuracy:.2f}")

        print("\nConfusion Matrix:")
        cm = self.stats['confusion_matrix']
        print(f"True Positives (TP): {cm['tp']:<6} False Positives (FP): {cm['fp']}")
        print(f"False Negatives (FN): {cm['fn']:<6} True Negatives (TN): {cm['tn']}")


def main():
    print(f"Using device: {device}")
    classifier = AccidentClassifier()

    # Path configuration
    accident_dir = "/content/mani/accidents @dl/Accident"
    non_accident_dir = "/content/mani/accidents @dl/Non Accident"

    # Process accident images
    print("\nProcessing accident images...")
    for idx, img_file in enumerate(os.listdir(accident_dir), 1):
        if img_file.lower().endswith(('.png', '.jpg', '.jpeg')):
            img_path = os.path.join(accident_dir, img_file)
            classifier.analyze_image(img_path, "accident")

    # Process non-accident images
    print("\nProcessing non-accident images...")
    for idx, img_file in enumerate(os.listdir(non_accident_dir), 1):
        if img_file.lower().endswith(('.png', '.jpg', '.jpeg')):
            img_path = os.path.join(non_accident_dir, img_file)
            classifier.analyze_image(img_path, "non_accident")

    classifier.print_metrics()

if __name__ == "__main__":
    main()
    
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Confusion matrix data
confusion_matrix = np.array([[4009, 98], [527, 0]])

# Labels for the axes
labels = ['Actual Positive', 'Actual Negative']
pred_labels = ['Predicted Positive', 'Predicted Negative']

# Create the heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=pred_labels, yticklabels=labels)

# Add labels and title
plt.xlabel('Predicted Label')
plt.ylabel('Actual Label')
plt.title('Confusion Matrix')

# Show the plot
plt.show()
